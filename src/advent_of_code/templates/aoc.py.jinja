"""Advent of Code {{ year }}, day {{ day }}: https://adventofcode.com/{{ year }}/day/{{ day }}"""
from __future__ import annotations

from io import StringIO
from typing import IO, Optional

import pytest

from advent_of_code.base import Solution
from advent_of_code.cli import log


class AocSolution(Solution[int, int]):
    def __init__(self, **kwargs):
        super().__init__({{ day }}, {{ year }}, **kwargs)

    def solve_part_one(self, input_file: Optional[IO] = None) -> int:
        with (input_file or self.open_input()) as fp:
            ...

    def solve_part_two(self, input_file: Optional[IO] = None) -> int:
        with (input_file or self.open_input()) as fp:
            ...


SAMPLE_INPUTS = [
    """\
""",
]


@pytest.fixture()
def sample_input(request):
    with StringIO(SAMPLE_INPUTS[getattr(request, "param", 0)]) as f:
        yield f


@pytest.fixture()
def solution():
    return AocSolution()


def test_part_one(solution: AocSolution, sample_input: IO):
    assert solution.solve_part_one(sample_input) == ...


def test_part_two(solution: AocSolution, sample_input: IO):
    assert solution.solve_part_two(sample_input) == ...
